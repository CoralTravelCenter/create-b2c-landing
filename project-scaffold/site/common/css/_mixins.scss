@use 'sass:math';

/*
Миксин для расчета размера шрифта
$px - задаем размер шрифта в px
*/
@mixin font($px) {
  $em-value: math.div($px, 20);
  font-size: #{$em-value}em;
}

/*
Миксин для подстановки любого правила и расчета его значения
$property - задаем любое свойство, для которого нужны размеры в em
$px - задаем значение для предыдущего свойства в px
*/
@mixin property($property, $px) {
  $em-value: math.div($px, 20);
  #{$property}: #{$em-value}em;
}

/*
Миксин для установки размера шрифта и вычисления значения свойства относительно него
$font-size-px - задаем размер шрифта в px
$property - задаем любое свойство, для которого нужны размеры в em
$px - задаем значение для предыдущего свойства в px
*/
@mixin fontAndProperty($font-size-px, $property, $property-px) {
  $font-size-em: math.div($font-size-px, 20) * 1em;
  font-size: $font-size-em;

  $base-pixel-size: math.div($font-size-em * 20, 1em);
  #{$property}: math.div($property-px, $base-pixel-size) * 1em;
}


// old

@mixin flex-grid($gap: 1em, $items-per-row: 4, $justify: center) {
  display: flex;
  flex-wrap: wrap;
  gap: $gap;
  justify-content: $justify;

  > * {
    width: calc((100% - ($items-per-row - 1) * $gap) / $items-per-row);
  }
}

@mixin reset() {
  position: static;
  left: auto;
  top: auto;
  right: auto;
  bottom: auto;
  width: auto;
  height: auto;
  margin: 0;
  padding: 0;
  transform: none;
  background: none;
}

@mixin bbox() {
  &, & * {
    box-sizing: border-box;
  }
}

@mixin interactive() {
  user-select: none;

  &:active {
    transform: translateY(2px);
  }
}

@mixin abs100x100() {
  position: absolute;
  left: 0;
  top: 0;
  width: 100%;
  height: 100%;
}

@mixin proportional($width2height-ratio) {
  position: relative;

  &:before {
    content: '';
    display: block;
    padding-top: (1 / $width2height-ratio) * 100%;
  }

  & > * {
    @include abs100x100();
  }
}

@mixin transit($what: all, $duration: 0.5s) {
  transition: $what $duration;
}

@mixin fluid-fontsize($fluid, $max-breakpoint: $wide-breakpoint) {
  font-size: $fluid;

  @media screen and (min-width: $max-breakpoint) {
    font-size: unit((unit($fluid) * unit($max-breakpoint) / 100), px);
  }
}

@mixin rounded-corners-overflow-fix() {
  -webkit-mask-image: -webkit-radial-gradient(white, black);
}

@mixin silly-b2c-font-size(
  $max-font-size: 20px,
  $mobile-based-font-size: 24px,
  $mobile-base-breakpoint: 720px,
  $max-breakpoint: 1440px,
  $mid-breakpoint: 1200px,
  $mob-breakpoint: 768px
) {
  font-size: $max-font-size;
  $below-max-fz: ($max-font-size * ($mid-breakpoint - 1px) / ($max-breakpoint - 1px));

  @media screen and (max-width: ($max-breakpoint - 1px)) {
    font-size: $below-max-fz;
  }

  @media screen and (max-width: ($mid-breakpoint - 1px)) {
    font-size: unit((unit($below-max-fz) / unit($mid-breakpoint - 1px) * 100), vw);
  }

  @media screen and (max-width: $mob-breakpoint) {
    font-size: unit((unit($mobile-based-font-size) / unit($mobile-base-breakpoint) * 100), vw);
  }
}
